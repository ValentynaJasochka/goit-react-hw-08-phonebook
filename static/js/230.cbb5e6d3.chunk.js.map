{"version":3,"file":"static/js/230.cbb5e6d3.chunk.js","mappings":"0OAYMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KACJG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,SAAUN,EAAAA,KACPG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAgDd,UA9CkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MAOjB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,MAAM,SAASC,QAAQ,SAASC,UAAU,SAASC,IAAI,OAAMC,SAAA,EACjEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,SAAU,GAAIC,MAAO,OAAOJ,SAAC,WAGnCC,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLC,cAAe,CAAEf,SAAU,GAAIJ,MAAO,IACtCoB,iBAAkBvB,EAClBwB,SAbe,SAACC,EAAQC,GAC5BlB,GAASmB,EAAAA,EAAAA,IAAMF,IACfC,EAAQE,WACV,EAU6BZ,UAEvBN,EAAAA,EAAAA,MAACmB,EAAAA,GAAU,CAAAb,SAAA,EACTN,EAAAA,EAAAA,MAACoB,EAAAA,GAAK,CAAAd,SAAA,CAAC,SAELC,EAAAA,EAAAA,KAACc,EAAAA,GAAW,CACVC,KAAK,QACLC,KAAK,QACLC,YAAY,0BAEdjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAQ,CAACF,KAAK,QAAQG,UAAU,YAEnC1B,EAAAA,EAAAA,MAACoB,EAAAA,GAAK,CAAAd,SAAA,CAAC,YAELC,EAAAA,EAAAA,KAACc,EAAAA,GAAW,CACVC,KAAK,WACLC,KAAK,WACLC,YAAY,6BAEdjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAQ,CAACF,KAAK,WAAWG,UAAU,YAGtCnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CAACC,YAAY,OAAOC,KAAK,KAAKC,QAAQ,QAAQR,KAAK,SAAQhB,SAAC,iBAO7E,C,yKChEaa,GAAaY,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4EAMzBb,GAAcU,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAaK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kEAK3Bd,EAAQW,EAAAA,GAAAA,MAAYM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8BAGpBT,GAAWM,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAoBQ,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,4C","sources":["components/LoginView/LoginView.jsx","components/RegisterView/RegisterView.styled.jsx"],"sourcesContent":["import { Formik } from 'formik';\nimport { Button, Flex, Text } from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledInput,\n  Label,\n  ErrorMsg,\n} from '../RegisterView/RegisterView.styled';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/AuthThunk';\n\nconst taskSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n});\nconst LoginView = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    dispatch(login(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" direction=\"column\" gap=\"40px\">\n      <Text fontSize={32} color={'navy'}>\n        Login\n      </Text>\n      <Formik\n        initialValues={{ password: '', email: '' }}\n        validationSchema={taskSchema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <Label>\n            Email\n            <StyledInput\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter your email... \"\n            />\n            <ErrorMsg name=\"email\" component=\"div\" />\n          </Label>\n          <Label>\n            Password\n            <StyledInput\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Enter your password... \"\n            />\n            <ErrorMsg name=\"password\" component=\"div\" />\n          </Label>\n\n          <Button colorScheme=\"blue\" size=\"sm\" variant=\"solid\" type=\"submit\">\n            Login\n          </Button>\n        </StyledForm>\n      </Formik>\n    </Flex>\n  );\n};\nexport default LoginView;\n","import { Field, Form, ErrorMessage } from 'formik';\nimport { styled } from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const StyledInput = styled(Field)`\n  width: 440px;\n  margin-left: 30px;\n  padding: 5px;\n`;\nexport const Label = styled.label`\n  font-size: 20px;\n`;\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n"],"names":["taskSchema","Yup","shape","email","min","max","required","password","dispatch","useDispatch","_jsxs","Flex","align","justify","direction","gap","children","_jsx","Text","fontSize","color","Formik","initialValues","validationSchema","onSubmit","values","actions","login","resetForm","StyledForm","Label","StyledInput","type","name","placeholder","ErrorMsg","component","Button","colorScheme","size","variant","styled","Form","_templateObject","_taggedTemplateLiteral","Field","_templateObject2","_templateObject3","ErrorMessage","_templateObject4"],"sourceRoot":""}